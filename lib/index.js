// Generated by CoffeeScript 1.6.3
(function() {
  var Client, Event, ex, os, raw, request, url, util, uuid, zlib, _;

  url = require('url');

  _ = require('underscore')._;

  uuid = require('node-uuid').v4;

  raw = require('raw-stacktrace');

  os = require('os');

  request = require('request');

  util = require('./util');

  zlib = require('zlib');

  (function() {
    var st;
    st = raw();
    return st.on('trace', function(err, callsites) {
      return err.callsites = callsites;
    });
  })();

  ex = module.exports;

  Event = (function() {
    function Event(opts) {
      var _ref, _ref1, _ref2;
      if (opts == null) {
        opts = {};
      }
      this.event_id = (_ref = opts.event_id) != null ? _ref : uuid().replace(/\-/g, "");
      this.culprit = (_ref1 = opts.culprit) != null ? _ref1 : "Unknown";
      if (opts.message != null) {
        this.message = opts.message;
      }
      if (opts.logger != null) {
        this.logger = opts.logger;
      }
      if (opts.level != null) {
        this.level = opts.level;
      }
      this.server_name = (_ref2 = opts.serverName) != null ? _ref2 : os.hostname();
      if (opts.tags != null) {
        this.tags = opts.tags;
      }
      if (opts.extra != null) {
        this.extra = opts.extra;
      }
      this.timestamp = new Date().toISOString().split('.')[0];
    }

    Event.prototype.http = function(req) {
      var context, http;
      context = {};
      if (req.body) {
        context.body = req.body;
      }
      if (req.params) {
        context.params = req.params;
      }
      if (req.session) {
        context.session = req.session;
      }
      http = {
        url: "" + req.headers.origin + req.url,
        method: req.method,
        data: context,
        query_string: req.query,
        cookies: req.cookies,
        headers: req.headers,
        env: process.env
      };
      return this["interface"]("Http", http);
    };

    Event.prototype.error = function(err, cb) {
      this.exception(err.name, err.message);
      this.stacktrace(err, cb);
      return this;
    };

    Event.prototype.stacktrace = function(err, cb) {
      var _this = this;
      util.buildStackTrace(err, function(err, frames) {
        if (err) {
          return cb(err);
        }
        _this["interface"]("Stacktrace", frames);
        return cb(null, frames);
      });
      return this;
    };

    Event.prototype.exception = function(type, value) {
      this["interface"]("Exception", {
        type: type,
        value: value
      });
      return this;
    };

    Event.prototype["interface"] = function(name, data) {
      this["sentry.interfaces." + name] = data;
      return this;
    };

    return Event;

  })();

  Client = (function() {
    function Client(opts) {
      var projectId, secret, uri;
      if (opts == null) {
        opts = {};
      }
      if (typeof opts === 'string') {
        if (opts === "") {
          throw new Error("Invalid DSN");
        }
        opts = util.parseDsn(opts);
      }
      uri = opts.uri, secret = opts.secret, projectId = opts.projectId;
      this.uri = uri;
      this["public"] = opts["public"];
      this.secret = secret;
      this.projectId = projectId;
      if (!this.uri || !this["public"] || !this.secret || !this.projectId) {
        throw new Error("Invalid configuration");
      }
    }

    Client.prototype.send = function(event, cb) {
      var json,
        _this = this;
      event.project = event.project || this.projectId;
      json = JSON.stringify(event);
      return zlib.deflate(json, function(err, buff) {
        var authHead, encoded, headers, sig, timestamp, uri;
        if (err) {
          return cb(err);
        }
        encoded = buff.toString('base64');
        timestamp = new Date().getTime();
        sig = util.makeSignature(timestamp, encoded, _this.secret);
        authHead = util.makeAuthHeader(sig, timestamp, _this["public"], _this.projectId);
        headers = {
          'X-Sentry-Auth': authHead,
          'Content-Type': 'application/octet-stream',
          'Content-Length': encoded.length
        };
        uri = "" + _this.uri + "api/store/";
        return request({
          uri: uri,
          headers: headers,
          method: "POST",
          body: encoded
        }, function(err, resp, body) {
          return cb && cb(err, resp, body);
        });
      });
    };

    Client.prototype.captureMessage = function(message, cb) {
      return this.send(ex.buildMessage(message), cb);
    };

    Client.prototype.captureError = function(err, cb) {
      var _this = this;
      return ex.buildError(err, function(error, event) {
        return _this.send(event, cb);
      });
    };

    return Client;

  })();

  ex.buildMessage = function(message) {
    var event;
    event = new Event({
      message: message
    });
    event["interface"]("Message", {
      message: message
    });
    return event;
  };

  ex.buildError = function(err, cb) {
    var event;
    event = new Event;
    return event.error(err, function(e, frames) {
      if (frames && frames.length > 0) {
        event.culprit = util.buildCulprit(frames[0]);
      } else {
        if (!frames) {
          event.culprit = "Unknown";
        }
      }
      event.message = err.message || err;
      return cb && cb(null, event);
    });
  };

  ex.Client = Client;

  ex.Event = Event;

  ex.util = util;

}).call(this);
